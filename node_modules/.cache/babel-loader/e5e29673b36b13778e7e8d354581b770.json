{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nconst errorGas = [\"call\", \"estimateGas\"];\n\nfunction spelunk(value, requireData) {\n  if (value == null) {\n    return null;\n  } // These *are* the droids we're looking for.\n\n\n  if (typeof value.message === \"string\" && value.message.match(\"reverted\")) {\n    const data = isHexString(value.data) ? value.data : null;\n\n    if (!requireData || data) {\n      return {\n        message: value.message,\n        data\n      };\n    }\n  } // Spelunk further...\n\n\n  if (typeof value === \"object\") {\n    for (const key in value) {\n      const result = spelunk(value[key], requireData);\n\n      if (result) {\n        return result;\n      }\n    }\n\n    return null;\n  } // Might be a JSON string we can further descend...\n\n\n  if (typeof value === \"string\") {\n    try {\n      return spelunk(JSON.parse(value), requireData);\n    } catch (error) {}\n  }\n\n  return null;\n}\n\nfunction checkError(method, error, params) {\n  const transaction = params.transaction || params.signedTransaction; // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n\n  if (method === \"call\") {\n    const result = spelunk(error, true);\n\n    if (result) {\n      return result.data;\n    } // Nothing descriptive..\n\n\n    logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n      data: \"0x\",\n      transaction,\n      error\n    });\n  }\n\n  if (method === \"estimateGas\") {\n    // Try to find something, with a preference on SERVER_ERROR body\n    let result = spelunk(error.body, false);\n\n    if (result == null) {\n      result = spelunk(error, false);\n    } // Found \"reverted\", this is a CALL_EXCEPTION\n\n\n    if (result) {\n      logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n        reason: result.message,\n        method,\n        transaction,\n        error\n      });\n    }\n  } // @TODO: Should we spelunk for message too?\n\n\n  let message = error.message;\n\n  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === \"string\") {\n    message = error.error.message;\n  } else if (typeof error.body === \"string\") {\n    message = error.body;\n  } else if (typeof error.responseText === \"string\") {\n    message = error.responseText;\n  }\n\n  message = (message || \"\").toLowerCase(); // \"insufficient funds for gas * price + value + cost(data)\"\n\n  if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error,\n      method,\n      transaction\n    });\n  } // \"nonce too low\"\n\n\n  if (message.match(/nonce (is )?too low/i)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error,\n      method,\n      transaction\n    });\n  } // \"replacement transaction underpriced\"\n\n\n  if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error,\n      method,\n      transaction\n    });\n  } // \"replacement transaction underpriced\"\n\n\n  if (message.match(/only replay-protected/i)) {\n    logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      error,\n      method,\n      transaction\n    });\n  }\n\n  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error,\n      method,\n      transaction\n    });\n  }\n\n  throw error;\n}\n\nfunction timer(timeout) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, timeout);\n  });\n}\n\nfunction getResult(payload) {\n  if (payload.error) {\n    // @TODO: not any\n    const error = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n\n  return value;\n}\n\nconst _constructorGuard = {};\nexport class JsonRpcSigner extends Signer {\n  constructor(constructorGuard, provider, addressOrIndex) {\n    super();\n\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n    }\n\n    defineReadOnly(this, \"provider\", provider);\n\n    if (addressOrIndex == null) {\n      addressOrIndex = 0;\n    }\n\n    if (typeof addressOrIndex === \"string\") {\n      defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n      defineReadOnly(this, \"_index\", null);\n    } else if (typeof addressOrIndex === \"number\") {\n      defineReadOnly(this, \"_index\", addressOrIndex);\n      defineReadOnly(this, \"_address\", null);\n    } else {\n      logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n    }\n  }\n\n  connect(provider) {\n    return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"connect\"\n    });\n  }\n\n  connectUnchecked() {\n    return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n  }\n\n  getAddress() {\n    if (this._address) {\n      return Promise.resolve(this._address);\n    }\n\n    return this.provider.send(\"eth_accounts\", []).then(accounts => {\n      if (accounts.length <= this._index) {\n        logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"getAddress\"\n        });\n      }\n\n      return this.provider.formatter.address(accounts[this._index]);\n    });\n  }\n\n  sendUncheckedTransaction(transaction) {\n    transaction = shallowCopy(transaction);\n    const fromAddress = this.getAddress().then(address => {\n      if (address) {\n        address = address.toLowerCase();\n      }\n\n      return address;\n    }); // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n    // wishes to use this, it is easy to specify explicitly, otherwise\n    // we look it up for them.\n\n    if (transaction.gasLimit == null) {\n      const estimate = shallowCopy(transaction);\n      estimate.from = fromAddress;\n      transaction.gasLimit = this.provider.estimateGas(estimate);\n    }\n\n    if (transaction.to != null) {\n      transaction.to = Promise.resolve(transaction.to).then(to => __awaiter(this, void 0, void 0, function* () {\n        if (to == null) {\n          return null;\n        }\n\n        const address = yield this.provider.resolveName(to);\n\n        if (address == null) {\n          logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n        }\n\n        return address;\n      }));\n    }\n\n    return resolveProperties({\n      tx: resolveProperties(transaction),\n      sender: fromAddress\n    }).then(_ref => {\n      let {\n        tx,\n        sender\n      } = _ref;\n\n      if (tx.from != null) {\n        if (tx.from.toLowerCase() !== sender) {\n          logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n        }\n      } else {\n        tx.from = sender;\n      }\n\n      const hexTx = this.provider.constructor.hexlifyTransaction(tx, {\n        from: true\n      });\n      return this.provider.send(\"eth_sendTransaction\", [hexTx]).then(hash => {\n        return hash;\n      }, error => {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n            action: \"sendTransaction\",\n            transaction: tx\n          });\n        }\n\n        return checkError(\"sendTransaction\", error, hexTx);\n      });\n    });\n  }\n\n  signTransaction(transaction) {\n    return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"signTransaction\"\n    });\n  }\n\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // This cannot be mined any earlier than any recent block\n      const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval); // Send the transaction\n\n      const hash = yield this.sendUncheckedTransaction(transaction);\n\n      try {\n        // Unfortunately, JSON-RPC only provides and opaque transaction hash\n        // for a response, and we need the actual transaction, so we poll\n        // for it; it should show up very quickly\n        return yield poll(() => __awaiter(this, void 0, void 0, function* () {\n          const tx = yield this.provider.getTransaction(hash);\n\n          if (tx === null) {\n            return undefined;\n          }\n\n          return this.provider._wrapTransaction(tx, hash, blockNumber);\n        }), {\n          oncePoll: this.provider\n        });\n      } catch (error) {\n        error.transactionHash = hash;\n        throw error;\n      }\n    });\n  }\n\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n      const address = yield this.getAddress();\n\n      try {\n        return yield this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\n      } catch (error) {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n            action: \"signMessage\",\n            from: address,\n            messageData: message\n          });\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  _legacySignMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n      const address = yield this.getAddress();\n\n      try {\n        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n        return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n      } catch (error) {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n            action: \"_legacySignMessage\",\n            from: address,\n            messageData: message\n          });\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  _signTypedData(domain, types, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Populate any ENS names (in-place)\n      const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, name => {\n        return this.provider.resolveName(name);\n      });\n      const address = yield this.getAddress();\n\n      try {\n        return yield this.provider.send(\"eth_signTypedData_v4\", [address.toLowerCase(), JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);\n      } catch (error) {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n            action: \"_signTypedData\",\n            from: address,\n            messageData: {\n              domain: populated.domain,\n              types,\n              value: populated.value\n            }\n          });\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  unlock(password) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const provider = this.provider;\n      const address = yield this.getAddress();\n      return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n    });\n  }\n\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n  sendTransaction(transaction) {\n    return this.sendUncheckedTransaction(transaction).then(hash => {\n      return {\n        hash: hash,\n        nonce: null,\n        gasLimit: null,\n        gasPrice: null,\n        data: null,\n        value: null,\n        chainId: null,\n        confirmations: 0,\n        from: null,\n        wait: confirmations => {\n          return this.provider.waitForTransaction(hash, confirmations);\n        }\n      };\n    });\n  }\n\n}\n\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true\n};\nexport class JsonRpcProvider extends BaseProvider {\n  constructor(url, network) {\n    let networkOrReady = network; // The network is unknown, query the JSON-RPC for it\n\n    if (networkOrReady == null) {\n      networkOrReady = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.detectNetwork().then(network => {\n            resolve(network);\n          }, error => {\n            reject(error);\n          });\n        }, 0);\n      });\n    }\n\n    super(networkOrReady); // Default URL\n\n    if (!url) {\n      url = getStatic(this.constructor, \"defaultUrl\")();\n    }\n\n    if (typeof url === \"string\") {\n      defineReadOnly(this, \"connection\", Object.freeze({\n        url: url\n      }));\n    } else {\n      defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n    }\n\n    this._nextId = 42;\n  }\n\n  get _cache() {\n    if (this._eventLoopCache == null) {\n      this._eventLoopCache = {};\n    }\n\n    return this._eventLoopCache;\n  }\n\n  static defaultUrl() {\n    return \"http:/\\/localhost:8545\";\n  }\n\n  detectNetwork() {\n    if (!this._cache[\"detectNetwork\"]) {\n      this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork(); // Clear this cache at the beginning of the next event loop\n\n      setTimeout(() => {\n        this._cache[\"detectNetwork\"] = null;\n      }, 0);\n    }\n\n    return this._cache[\"detectNetwork\"];\n  }\n\n  _uncachedDetectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield timer(0);\n      let chainId = null;\n\n      try {\n        chainId = yield this.send(\"eth_chainId\", []);\n      } catch (error) {\n        try {\n          chainId = yield this.send(\"net_version\", []);\n        } catch (error) {}\n      }\n\n      if (chainId != null) {\n        const getNetwork = getStatic(this.constructor, \"getNetwork\");\n\n        try {\n          return getNetwork(BigNumber.from(chainId).toNumber());\n        } catch (error) {\n          return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            chainId: chainId,\n            event: \"invalidNetwork\",\n            serverError: error\n          });\n        }\n      }\n\n      return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n        event: \"noNetwork\"\n      });\n    });\n  }\n\n  getSigner(addressOrIndex) {\n    return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n  }\n\n  getUncheckedSigner(addressOrIndex) {\n    return this.getSigner(addressOrIndex).connectUnchecked();\n  }\n\n  listAccounts() {\n    return this.send(\"eth_accounts\", []).then(accounts => {\n      return accounts.map(a => this.formatter.address(a));\n    });\n  }\n\n  send(method, params) {\n    const request = {\n      method: method,\n      params: params,\n      id: this._nextId++,\n      jsonrpc: \"2.0\"\n    };\n    this.emit(\"debug\", {\n      action: \"request\",\n      request: deepCopy(request),\n      provider: this\n    }); // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n\n    const cache = [\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0;\n\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(this.connection, JSON.stringify(request), getResult).then(result => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: request,\n        response: result,\n        provider: this\n      });\n      return result;\n    }, error => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        error: error,\n        request: request,\n        provider: this\n      });\n      throw error;\n    }); // Cache the fetch, but clear it on the next event loop\n\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n\n  prepareRequest(method, params) {\n    switch (method) {\n      case \"getBlockNumber\":\n        return [\"eth_blockNumber\", []];\n\n      case \"getGasPrice\":\n        return [\"eth_gasPrice\", []];\n\n      case \"getBalance\":\n        return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getTransactionCount\":\n        return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getCode\":\n        return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getStorageAt\":\n        return [\"eth_getStorageAt\", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];\n\n      case \"sendTransaction\":\n        return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n\n      case \"getBlock\":\n        if (params.blockTag) {\n          return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n        } else if (params.blockHash) {\n          return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n        }\n\n        return null;\n\n      case \"getTransaction\":\n        return [\"eth_getTransactionByHash\", [params.transactionHash]];\n\n      case \"getTransactionReceipt\":\n        return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n\n      case \"call\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_call\", [hexlifyTransaction(params.transaction, {\n            from: true\n          }), params.blockTag]];\n        }\n\n      case \"estimateGas\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, {\n            from: true\n          })]];\n        }\n\n      case \"getLogs\":\n        if (params.filter && params.filter.address != null) {\n          params.filter.address = getLowerCase(params.filter.address);\n        }\n\n        return [\"eth_getLogs\", [params.filter]];\n\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  perform(method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Legacy networks do not like the type field being passed along (which\n      // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n      if (method === \"call\" || method === \"estimateGas\") {\n        const tx = params.transaction;\n\n        if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n          // If there are no EIP-1559 properties, it might be non-EIP-1559\n          if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n            const feeData = yield this.getFeeData();\n\n            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n              // Network doesn't know about EIP-1559 (and hence type)\n              params = shallowCopy(params);\n              params.transaction = shallowCopy(tx);\n              delete params.transaction.type;\n            }\n          }\n        }\n      }\n\n      const args = this.prepareRequest(method, params);\n\n      if (args == null) {\n        logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n          operation: method\n        });\n      }\n\n      try {\n        return yield this.send(args[0], args[1]);\n      } catch (error) {\n        return checkError(method, error, params);\n      }\n    });\n  }\n\n  _startEvent(event) {\n    if (event.tag === \"pending\") {\n      this._startPending();\n    }\n\n    super._startEvent(event);\n  }\n\n  _startPending() {\n    if (this._pendingFilter != null) {\n      return;\n    }\n\n    const self = this;\n    const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n    this._pendingFilter = pendingFilter;\n    pendingFilter.then(function (filterId) {\n      function poll() {\n        self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n          if (self._pendingFilter != pendingFilter) {\n            return null;\n          }\n\n          let seq = Promise.resolve();\n          hashes.forEach(function (hash) {\n            // @TODO: This should be garbage collected at some point... How? When?\n            self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n            seq = seq.then(function () {\n              return self.getTransaction(hash).then(function (tx) {\n                self.emit(\"pending\", tx);\n                return null;\n              });\n            });\n          });\n          return seq.then(function () {\n            return timer(1000);\n          });\n        }).then(function () {\n          if (self._pendingFilter != pendingFilter) {\n            self.send(\"eth_uninstallFilter\", [filterId]);\n            return;\n          }\n\n          setTimeout(function () {\n            poll();\n          }, 0);\n          return null;\n        }).catch(error => {});\n      }\n\n      poll();\n      return filterId;\n    }).catch(error => {});\n  }\n\n  _stopEvent(event) {\n    if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n      this._pendingFilter = null;\n    }\n\n    super._stopEvent(event);\n  } // Convert an ethers.js transaction into a JSON-RPC transaction\n  //  - gasLimit => gas\n  //  - All values hexlified\n  //  - All numeric values zero-striped\n  //  - All addresses are lowercased\n  // NOTE: This allows a TransactionRequest, but all values should be resolved\n  //       before this is called\n  // @TODO: This will likely be removed in future versions and prepareRequest\n  //        will be the preferred method for this.\n\n\n  static hexlifyTransaction(transaction, allowExtra) {\n    // Check only allowed properties are given\n    const allowed = shallowCopy(allowedTransactionKeys);\n\n    if (allowExtra) {\n      for (const key in allowExtra) {\n        if (allowExtra[key]) {\n          allowed[key] = true;\n        }\n      }\n    }\n\n    checkProperties(transaction, allowed);\n    const result = {}; // JSON-RPC now requires numeric values to be \"quantity\" values\n\n    [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n\n      const value = hexValue(BigNumber.from(transaction[key]));\n\n      if (key === \"gasLimit\") {\n        key = \"gas\";\n      }\n\n      result[key] = value;\n    });\n    [\"from\", \"to\", \"data\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n\n      result[key] = hexlify(transaction[key]);\n    });\n\n    if (transaction.accessList) {\n      result[\"accessList\"] = accessListify(transaction.accessList);\n    }\n\n    return result;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Signer","BigNumber","hexlify","hexValue","hexZeroPad","isHexString","_TypedDataEncoder","checkProperties","deepCopy","defineReadOnly","getStatic","resolveProperties","shallowCopy","toUtf8Bytes","accessListify","fetchJson","poll","Logger","version","logger","BaseProvider","errorGas","spelunk","value","requireData","message","match","data","key","result","JSON","parse","error","checkError","method","params","transaction","signedTransaction","throwError","errors","CALL_EXCEPTION","body","UNPREDICTABLE_GAS_LIMIT","reason","code","SERVER_ERROR","responseText","toLowerCase","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNSUPPORTED_OPERATION","indexOf","timer","timeout","Promise","resolve","setTimeout","getResult","payload","Error","getLowerCase","_constructorGuard","JsonRpcSigner","constructor","constructorGuard","provider","addressOrIndex","formatter","address","throwArgumentError","connect","operation","connectUnchecked","UncheckedJsonRpcSigner","_address","_index","getAddress","send","then","accounts","length","sendUncheckedTransaction","fromAddress","gasLimit","estimate","from","estimateGas","to","__awaiter","resolveName","tx","sender","hexTx","hexlifyTransaction","hash","ACTION_REJECTED","action","signTransaction","sendTransaction","blockNumber","_getInternalBlockNumber","pollingInterval","getTransaction","undefined","_wrapTransaction","oncePoll","transactionHash","signMessage","messageData","_legacySignMessage","_signTypedData","domain","types","populated","resolveNames","name","stringify","getPayload","unlock","password","nonce","gasPrice","chainId","confirmations","wait","waitForTransaction","allowedTransactionKeys","type","accessList","maxFeePerGas","maxPriorityFeePerGas","JsonRpcProvider","url","network","networkOrReady","reject","detectNetwork","Object","freeze","_nextId","_cache","_eventLoopCache","defaultUrl","_uncachedDetectNetwork","getNetwork","toNumber","NETWORK_ERROR","event","serverError","getSigner","getUncheckedSigner","listAccounts","map","a","request","id","jsonrpc","emit","cache","connection","response","prepareRequest","blockTag","position","includeTransactions","blockHash","filter","perform","isZero","feeData","getFeeData","args","NOT_IMPLEMENTED","_startEvent","tag","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","forEach","_emitted","catch","_stopEvent","listenerCount","allowExtra","allowed"],"sources":["/Users/lipeichen/Downloads/Hardhat_ReactJS_Tutorial-main/node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts"],"sourcesContent":["\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction spelunk(value: any, requireData: boolean): null | { message: string, data: null | string } {\n    if (value == null) { return null; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\" && value.message.match(\"reverted\")) {\n        const data = isHexString(value.data) ? value.data: null;\n        if (!requireData || data) {\n            return { message: value.message, data };\n        }\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key], requireData);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        } catch (error) { }\n    }\n\n    return null;\n}\n\nfunction checkError(method: string, error: any, params: any): any {\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) { return result.data; }\n\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\", transaction, error\n        });\n    }\n\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) { result = spelunk(error, false); }\n\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message, method, transaction, error\n            });\n        }\n    }\n\n    // @TODO: Should we spelunk for message too?\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n                        action: \"sendTransaction\",\n                        transaction: tx\n                    });\n                }\n\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n        try {\n            return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"signMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        try {\n            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n            return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_legacySignMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        try {\n            return await this.provider.send(\"eth_signTypedData_v4\", [\n                address.toLowerCase(),\n                JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n            ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_signTypedData\",\n                    from: address,\n                    messageData: { domain: populated.domain, types, value: populated.value }\n                });\n            }\n            throw error;\n        }\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-1559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue(BigNumber.from((<any>transaction)[key]));\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}