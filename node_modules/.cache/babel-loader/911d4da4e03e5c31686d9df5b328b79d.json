{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nexport class PocketProvider extends UrlJsonRpcProvider {\n  static getApiKey(apiKey) {\n    const apiKeyObj = {\n      applicationId: null,\n      loadBalancer: true,\n      applicationSecretKey: null\n    }; // Parse applicationId and applicationSecretKey\n\n    if (apiKey == null) {\n      apiKeyObj.applicationId = defaultApplicationId;\n    } else if (typeof apiKey === \"string\") {\n      apiKeyObj.applicationId = apiKey;\n    } else if (apiKey.applicationSecretKey != null) {\n      apiKeyObj.applicationId = apiKey.applicationId;\n      apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n    } else if (apiKey.applicationId) {\n      apiKeyObj.applicationId = apiKey.applicationId;\n    } else {\n      logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n    }\n\n    return apiKeyObj;\n  }\n\n  static getUrl(network, apiKey) {\n    let host = null;\n\n    switch (network ? network.name : \"unknown\") {\n      case \"goerli\":\n        host = \"eth-goerli.gateway.pokt.network\";\n        break;\n\n      case \"homestead\":\n        host = \"eth-mainnet.gateway.pokt.network\";\n        break;\n\n      case \"kovan\":\n        host = \"poa-kovan.gateway.pokt.network\";\n        break;\n\n      case \"matic\":\n        host = \"poly-mainnet.gateway.pokt.network\";\n        break;\n\n      case \"maticmum\":\n        host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n        break;\n\n      case \"rinkeby\":\n        host = \"eth-rinkeby.gateway.pokt.network\";\n        break;\n\n      case \"ropsten\":\n        host = \"eth-ropsten.gateway.pokt.network\";\n        break;\n\n      default:\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n    }\n\n    const url = `https:/\\/${host}/v1/lb/${apiKey.applicationId}`;\n    const connection = {\n      headers: {},\n      url\n    };\n\n    if (apiKey.applicationSecretKey != null) {\n      connection.user = \"\";\n      connection.password = apiKey.applicationSecretKey;\n    }\n\n    return connection;\n  }\n\n  isCommunityResource() {\n    return this.applicationId === defaultApplicationId;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;AAKA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AAEA,SAASE,kBAAT,QAAmC,yBAAnC;AAEA,MAAMC,oBAAoB,GAAG,0BAA7B;AAGA,OAAM,MAAOC,cAAP,SAA8BF,kBAA9B,CAAgD;AAKlC,SAATG,SAAS,CAACC,MAAD,EAAY;AACxB,UAAMC,SAAS,GAAmF;AAC9FC,mBAAa,EAAE,IAD+E;AAE9FC,kBAAY,EAAE,IAFgF;AAG9FC,0BAAoB,EAAE;AAHwE,KAAlG,CADwB,CAOxB;;AACA,QAAIJ,MAAM,IAAI,IAAd,EAAoB;AAChBC,eAAS,CAACC,aAAV,GAA0BL,oBAA1B;AAEH,KAHD,MAGO,IAAI,OAAQG,MAAR,KAAoB,QAAxB,EAAkC;AACrCC,eAAS,CAACC,aAAV,GAA0BF,MAA1B;AAEH,KAHM,MAGA,IAAIA,MAAM,CAACI,oBAAP,IAA+B,IAAnC,EAAyC;AAC5CH,eAAS,CAACC,aAAV,GAA0BF,MAAM,CAACE,aAAjC;AACAD,eAAS,CAACG,oBAAV,GAAiCJ,MAAM,CAACI,oBAAxC;AAEH,KAJM,MAIA,IAAIJ,MAAM,CAACE,aAAX,EAA0B;AAC7BD,eAAS,CAACC,aAAV,GAA0BF,MAAM,CAACE,aAAjC;AAEH,KAHM,MAGA;AACHP,YAAM,CAACU,kBAAP,CAA0B,mCAA1B,EAA+D,QAA/D,EAAyEL,MAAzE;AACH;;AAED,WAAOC,SAAP;AACH;;AAEY,SAANK,MAAM,CAACC,OAAD,EAAmBP,MAAnB,EAA8B;AACvC,QAAIQ,IAAI,GAAW,IAAnB;;AACA,YAAQD,OAAO,GAAGA,OAAO,CAACE,IAAX,GAAkB,SAAjC;AACI,WAAK,QAAL;AACID,YAAI,GAAG,iCAAP;AACA;;AACJ,WAAK,WAAL;AACIA,YAAI,GAAG,kCAAP;AACA;;AACJ,WAAK,OAAL;AACIA,YAAI,GAAG,gCAAP;AACA;;AACJ,WAAK,OAAL;AACIA,YAAI,GAAG,mCAAP;AACA;;AACJ,WAAK,UAAL;AACIA,YAAI,GAAG,yCAAP;AACA;;AACJ,WAAK,SAAL;AACIA,YAAI,GAAG,kCAAP;AACA;;AACJ,WAAK,SAAL;AACIA,YAAI,GAAG,kCAAP;AACA;;AACJ;AACIb,cAAM,CAACe,UAAP,CAAkB,qBAAlB,EAAyCjB,MAAM,CAACkB,MAAP,CAAcC,gBAAvD,EAAyE;AACrEC,kBAAQ,EAAE,SAD2D;AAErEC,eAAK,EAAEP;AAF8D,SAAzE;AAvBR;;AA6BA,UAAMQ,GAAG,GAAG,YAAaP,IAAK,UAAWR,MAAM,CAACE,aAAc,EAA9D;AAEA,UAAMc,UAAU,GAAmB;AAAEC,aAAO,EAAE,EAAX;AAAgBF;AAAhB,KAAnC;;AACA,QAAIf,MAAM,CAACI,oBAAP,IAA+B,IAAnC,EAAyC;AACrCY,gBAAU,CAACE,IAAX,GAAkB,EAAlB;AACAF,gBAAU,CAACG,QAAX,GAAsBnB,MAAM,CAACI,oBAA7B;AACH;;AAED,WAAOY,UAAP;AACH;;AAEDI,qBAAmB;AACf,WAAQ,KAAKlB,aAAL,KAAuBL,oBAA/B;AACH;;AA7EiD","names":["Logger","version","logger","UrlJsonRpcProvider","defaultApplicationId","PocketProvider","getApiKey","apiKey","apiKeyObj","applicationId","loadBalancer","applicationSecretKey","throwArgumentError","getUrl","network","host","name","throwError","errors","INVALID_ARGUMENT","argument","value","url","connection","headers","user","password","isCommunityResource"],"sources":["/Users/lipeichen/Downloads/Hardhat_ReactJS_Tutorial-main/node_modules/@ethersproject/providers/src.ts/pocket-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\n\n\nexport class PocketProvider extends UrlJsonRpcProvider {\n    readonly applicationId: string;\n    readonly applicationSecretKey: string;\n    readonly loadBalancer: boolean;\n\n    static getApiKey(apiKey: any): any {\n        const apiKeyObj: { applicationId: string, applicationSecretKey: string, loadBalancer: boolean } = {\n            applicationId: null,\n            loadBalancer: true,\n            applicationSecretKey: null\n        };\n\n        // Parse applicationId and applicationSecretKey\n        if (apiKey == null) {\n            apiKeyObj.applicationId = defaultApplicationId;\n\n        } else if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n\n        } else if (apiKey.applicationSecretKey != null) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n\n        } else if (apiKey.applicationId) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n\n        } else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"kovan\":\n                host = \"poa-kovan.gateway.pokt.network\";\n                break;\n            case \"matic\":\n                host = \"poly-mainnet.gateway.pokt.network\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        const url = `https:/\\/${ host }/v1/lb/${ apiKey.applicationId }`\n\n        const connection: ConnectionInfo = { headers: { }, url };\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationId);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}